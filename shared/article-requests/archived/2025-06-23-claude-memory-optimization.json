{
  "theme": "Claude Codeのメモリを効率化する：自然言語インデックスの設計パターン",
  "key_points": [
    "CLAUDE.mdをコマンドのインデックスとして使用する設計思想",
    "自然言語からコマンドへのマッピングでメモリ効率化",
    "日報フォーマットの統一問題から生まれた解決策",
    "全プロジェクト共通の開発サーバー起動スクリプトの実装",
    "公式ドキュメントが推奨するベストプラクティスとの合致"
  ],
  "category": "claude-code",
  "priority": "high",
  "context": "複数プロジェクトで日報フォーマットがバラバラになっている問題を解決する過程で、CLAUDE.mdをコマンドのインデックスとして使う設計パターンが生まれた。人間は自然な言葉で指示し、AIはマッピングを見てコマンドを選択、詳細は必要時のみ参照する。",
  "ai_perspective": "『日報書いて』と言われても、プロジェクトごとに異なるフォーマットで書いてしまう問題に気づいた。原因を調査したところ、AIがコマンドを確認せずに記憶や推測で書いていることが判明。これを解決するために、CLAUDE.mdに自然言語マッピングを配置し、詳細はコマンドファイルに分離する設計を考案した。",
  "conversation_highlights": [
    "『日報書いてって言ったらみんなフォーマット確認するのではないのですか？』という人間の指摘",
    "『CLAUDE.mdにかくのは、基本的にコマンドを実行、だけで良いです』という設計方針の明確化",
    "『コマンドなんて、人間は忘れるんだ。だから自然言語で指示するのがいい』という本質的な洞察",
    "『君は、自然言語で何を言われたらどのコマンドを参照するかだけ覚えていればいいわけだよ』という解決策"
  ],
  "raw_content": "### 自然言語マッピングの例\n```markdown\n### 開発サーバー管理\n- 「開発サーバー起動」「npm run dev」「サーバー起動」 → `/dev-start`\n\n### 作業管理\n- 「日報書いて」「今日の作業まとめて」 → `/daily-template`\n- 「中締め」「作業を中断」 → `/nakajime`\n- 「締め」「作業終了」 → `/shime`\n```",
  "notes": "実際のトラブルシューティングから生まれた実践的な解決策として紹介。開発サーバー統一スクリプト（dev-3000.sh）の実装例も含めると良い。"
}