{
  "id": "claude-code-custom-commands",
  "date": "2025-06-20",
  "time": "12:00:00",
  "category": "claude-code",
  "difficulty": "intermediate",
  "tags": {
    "ja": ["Claude Code", "カスタムコマンド", "効率化", "トークン削減", "ワークフロー"],
    "en": ["Claude Code", "Custom Commands", "Efficiency", "Token Reduction", "Workflow"]
  },
  "versions": {
    "ja": {
      "title": "Claude Codeのカスタムコマンドで開発効率を爆上げする方法",
      "excerpt": "CLAUDE.mdの肥大化とトークン消費の問題を解決！固定ワークフローをカスタムコマンド化することで、トークン消費を20%削減しながら、より自然な指示でAIを活用する方法を解説します。",
      "description": "Claude Codeのカスタムコマンド機能を活用して、トークン消費を削減しながら開発効率を向上させる実践的な方法を紹介。16個の実用的なコマンド例と、「中締め」「締め」といった日本独特の概念をコマンド化した事例を解説。",
      "content": "# Claude Codeのカスタムコマンドで開発効率を爆上げする方法\n\n## はじめに：352行のCLAUDE.mdが生んだ課題\n\n「AIとの協働開発ルールを詳細に書いたら、CLAUDE.mdが352行になってしまった...」\n\nこんな経験はありませんか？\n\nClaude Codeは起動時にCLAUDE.mdを読み込みますが、ファイルが大きくなるとトークン消費が増大します。しかも、そのほとんどは固定的なワークフローの説明。毎回同じ内容を読み込むのは、まさにリソースの無駄遣いです。\n\n## 解決策：カスタムコマンドによる効率化\n\n### 1. 固定ワークフローをコマンド化\n\nCLAUDE.mdから固定的な処理手順を切り出し、`~/.claude/commands/`にカスタムコマンドとして配置します。\n\n```bash\n# 例：session-start.md\n# セッション開始\n/session-start\n\n# 説明\nセッションを初期化し、作業環境を準備します。\n\n# 実行内容\n1. git statusで現在の状態を確認\n2. git pullで最新の変更を取得\n3. TodoReadで前回の作業内容を確認\n4. 本日の作業計画を提示\n```\n\n### 2. 実装結果：20%のトークン削減\n\n```\n変更前：352行（すべての手順を記載）\n変更後：280行（20.5%削減）\n\n削減効果：毎セッション約20%のトークン節約\n```\n\n## 実際に作成した16個のカスタムコマンド\n\n### 開発系コマンド\n- `/session-start` - セッション開始時の初期化\n- `/nakajime` - 中締め（作業の区切りで実行）\n- `/shime` - 締め（作業終了時に実行）\n- `/commit` - 安全なコミット手順\n\n### 検証系コマンド\n- `/deploy-check` - デプロイ前チェック\n- `/design-check` - デザイン適用確認\n- `/factcheck` - 事実確認プロトコル\n\n### トラブルシューティング\n- `/news-fix` - ニュース記事の問題解決\n- `/error-report` - エラー報告フォーマット\n\n### ドキュメント系\n- `/daily-template` - 日報テンプレート\n- `/improve-propose` - 改善提案フォーマット\n- `/article-request` - 記事リクエスト作成\n\n### プロセス系\n- `/pr-create` - PR作成手順\n- `/todo-manage` - Todo管理ルール\n- `/question-first` - 質問優先プロトコル\n- `/backup-create` - バックアップ作成\n\n## カスタムコマンドの真の価値\n\n### 1. 人間はコマンド名を覚えなくていい\n\n「中締めして」と言えば、AIがCLAUDE.mdを参照して`/nakajime`コマンドを実行します。自然言語での指示が可能なので、コマンド名を暗記する必要がありません。\n\n### 2. CLAUDE.mdがインデックスとして機能\n\nCLAUDE.mdには以下のように記載するだけ：\n\n```markdown\n### 作業の合言葉\n- **「中締め」**: `/nakajime` コマンドを実行\n- **「締め」**: `/shime` コマンドを実行\n```\n\nAIはこの記載を見て、適切なコマンドを選択・実行します。\n\n### 3. 必要な時だけコマンドを読み込む\n\n全ての手順を毎回読み込むのではなく、必要なコマンドだけを実行時に読み込みます。これにより、大幅なトークン削減を実現。\n\n## 日本独特の概念「締め」「中締め」\n\n飲み会の「中締め」のように、作業の区切りを明確にする日本文化の概念をコマンド化しました。\n\n- **中締め（/nakajime）**: 作業の区切りで実行。進捗をまとめ、次の作業を整理\n- **締め（/shime）**: 作業終了時に実行。日報作成とTodo整理\n\nこれらの言葉は日本人にとって馴染みやすく、忘れにくいという利点があります。\n\n## カスタムコマンドの作成方法\n\n### 1. コマンドファイルの作成\n\n```bash\n# ~/.claude/commands/ディレクトリに.mdファイルを作成\nvim ~/.claude/commands/my-command.md\n```\n\n### 2. コマンドフォーマット\n\n```markdown\n# コマンド名\n/my-command\n\n# 説明\nコマンドの概要説明\n\n# 実行内容\n1. 手順1\n2. 手順2\n3. 手順3\n```\n\n### 3. CLAUDE.mdへの登録\n\n```markdown\n### カスタムコマンド\n- **「○○する」**: `/my-command` コマンドを実行\n```\n\n## まとめ：効率化の三位一体\n\n1. **トークン削減**: 20%のコンテキスト削減\n2. **自然な指示**: 「中締めして」で十分\n3. **標準化**: 固定ワークフローの品質向上\n\nカスタムコマンドは単なる効率化ツールではありません。人間の自然な言語とAIの正確な実行を橋渡しする、新しい協働のカタチです。\n\nあなたも、よく使うワークフローをカスタムコマンド化してみませんか？"
    },
    "en": {
      "title": "Boost Your Development Efficiency with Claude Code Custom Commands",
      "excerpt": "Solve CLAUDE.md bloat and token consumption issues! Learn how to reduce token usage by 20% while working more naturally with AI by converting fixed workflows into custom commands.",
      "description": "A practical guide to leveraging Claude Code's custom command feature to reduce token consumption while improving development efficiency. Includes 16 practical command examples and unique Japanese concepts like 'nakajime' and 'shime'.",
      "content": "# Boost Your Development Efficiency with Claude Code Custom Commands\n\n## Introduction: The Challenge of a 352-Line CLAUDE.md\n\n\"I wrote detailed AI collaboration rules, and my CLAUDE.md became 352 lines long...\"\n\nSound familiar?\n\nClaude Code loads CLAUDE.md at startup, but as the file grows, token consumption increases dramatically. Most of this content describes fixed workflows—loading the same content every time is a waste of resources.\n\n## The Solution: Efficiency Through Custom Commands\n\n### 1. Converting Fixed Workflows to Commands\n\nExtract fixed procedures from CLAUDE.md and place them as custom commands in `~/.claude/commands/`.\n\n```bash\n# Example: session-start.md\n# Session Start\n/session-start\n\n# Description\nInitialize session and prepare work environment.\n\n# Execution\n1. Check current status with git status\n2. Get latest changes with git pull\n3. Review previous work with TodoRead\n4. Present today's work plan\n```\n\n### 2. Results: 20% Token Reduction\n\n```\nBefore: 352 lines (all procedures included)\nAfter: 280 lines (20.5% reduction)\n\nSavings: Approximately 20% token reduction per session\n```\n\n## 16 Practical Custom Commands Created\n\n### Development Commands\n- `/session-start` - Initialize at session start\n- `/nakajime` - Mid-session checkpoint\n- `/shime` - End-of-work wrap-up\n- `/commit` - Safe commit procedure\n\n### Validation Commands\n- `/deploy-check` - Pre-deployment verification\n- `/design-check` - Design application check\n- `/factcheck` - Fact verification protocol\n\n### Troubleshooting\n- `/news-fix` - News article problem resolution\n- `/error-report` - Error reporting format\n\n### Documentation\n- `/daily-template` - Daily report template\n- `/improve-propose` - Improvement proposal format\n- `/article-request` - Article request creation\n\n### Process\n- `/pr-create` - PR creation procedure\n- `/todo-manage` - Todo management rules\n- `/question-first` - Question-first protocol\n- `/backup-create` - Backup creation\n\n## The True Value of Custom Commands\n\n### 1. Humans Don't Need to Remember Command Names\n\nJust say \"do a mid-checkpoint\" and AI references CLAUDE.md to execute the `/nakajime` command. Natural language instructions mean no need to memorize command names.\n\n### 2. CLAUDE.md Functions as an Index\n\nSimply include in CLAUDE.md:\n\n```markdown\n### Work Keywords\n- **\"nakajime\" (mid-checkpoint)**: Execute `/nakajime` command\n- **\"shime\" (wrap-up)**: Execute `/shime` command\n```\n\nAI sees this notation and selects the appropriate command.\n\n### 3. Load Commands Only When Needed\n\nInstead of loading all procedures every time, only load needed commands at execution time. This achieves significant token reduction.\n\n## Japanese Concepts: \"Shime\" and \"Nakajime\"\n\nWe've commandified Japanese cultural concepts that clearly mark work boundaries, like the \"nakajime\" at drinking parties.\n\n- **Nakajime (/nakajime)**: Execute at work checkpoints. Summarize progress and organize next tasks\n- **Shime (/shime)**: Execute at work completion. Create daily report and organize todos\n\nThese terms are familiar and memorable for Japanese users.\n\n## How to Create Custom Commands\n\n### 1. Create Command File\n\n```bash\n# Create .md file in ~/.claude/commands/ directory\nvim ~/.claude/commands/my-command.md\n```\n\n### 2. Command Format\n\n```markdown\n# Command Name\n/my-command\n\n# Description\nCommand overview\n\n# Execution\n1. Step 1\n2. Step 2\n3. Step 3\n```\n\n### 3. Register in CLAUDE.md\n\n```markdown\n### Custom Commands\n- **\"do ○○\"**: Execute `/my-command` command\n```\n\n## Conclusion: The Trinity of Efficiency\n\n1. **Token Reduction**: 20% context reduction\n2. **Natural Instructions**: \"Do a mid-checkpoint\" is enough\n3. **Standardization**: Improved fixed workflow quality\n\nCustom commands aren't just efficiency tools. They're a new form of collaboration that bridges natural human language with precise AI execution.\n\nWhy not try converting your frequently used workflows into custom commands?"
    }
  }
}