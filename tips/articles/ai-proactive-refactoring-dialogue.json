{
  "id": "ai-proactive-refactoring-dialogue",
  "slug": "ai-proactive-refactoring-dialogue",
  "date": "2025-06-16",
  "category": "ai-collaboration",
  "difficulty": "advanced",
  "readingTime": 12,
  "featured": true,
  "tags": {
    "ja": [
      "AI協働",
      "リファクタリング",
      "対話型開発",
      "品質向上",
      "ベストプラクティス"
    ],
    "en": [
      "AI Collaboration",
      "Refactoring",
      "Interactive Development",
      "Quality Improvement",
      "Best Practices"
    ]
  },
  "title": {
    "ja": "AIとの対話的リファクタリング：質問と確認で品質を守る",
    "en": "Interactive Refactoring with AI: Ensuring Quality Through Questions and Confirmations"
  },
  "excerpt": {
    "ja": "AIが矛盾やリスクを察知して質問することで、より安全で効率的なリファクタリングを実現する方法を解説します。",
    "en": "Learn how AI can detect contradictions and risks, asking questions to achieve safer and more efficient refactoring."
  },
  "content": {
    "ja": "## なぜAIは質問すべきなのか\n\n2025年6月16日の事例：正常に動作していたTipsページで、AIが「修正」を試みた結果、データの整合性が崩れました。もしAIが最初に「このエラーの根本原因は何だと思いますか？」と質問していたら、この問題は防げたはずです。\n\n## AIが質問すべき5つのタイミング\n\n### 1. ドキュメントとの矛盾を発見したとき\n\n```typescript\n// 🤖 AI: 「CLAUDE.mdには『デザインシステムを必ず使用』とありますが、\n//         このコンポーネントは直接Tailwindクラスを使用しています。\n//         先にデザインシステムに追加してから使用すべきでしょうか？」\n\nconst Component = () => (\n  <h1 className=\"text-3xl font-bold\">タイトル</h1>  // 矛盾を検出\n)\n\n// 人間: 「そうだね、まずデザインシステムに追加してから使おう」\n```\n\n### 2. 影響範囲が大きい変更のとき\n\n```bash\n# 🤖 AI: 「この変更は23個のファイルに影響します。\n#         段階的に進めますか？それとも一括で変更しますか？\n#         影響するファイルのリストを確認しますか？」\n\n# 人間: 「リストを見せて。重要度で分類して段階的に進めよう」\n```\n\n### 3. データの不整合を発見したとき\n\n```javascript\n// 🤖 AI: 「index.jsonには15個の記事がありますが、\n//         articlesフォルダには17個のファイルがあります。\n//         どちらが正しい状態ですか？同期を取りますか？」\n\n// 人間: 「ファイルシステムが正。index.jsonを再生成して」\n```\n\n### 4. パフォーマンスへの懸念があるとき\n\n```typescript\n// 🤖 AI: 「このリファクタリングでバンドルサイズが15%増加します。\n//         コード分割を検討しますか？それとも許容範囲内ですか？」\n\n// 人間: 「15%は大きいね。主な原因を分析して」\n```\n\n### 5. 過去の失敗パターンと類似しているとき\n\n```javascript\n// 🤖 AI: 「以前、似たような状況で index.json の同期が\n//         崩れた事例がドキュメントにあります。\n//         今回も個別ファイルと index.json の両方を\n//         確認してから進めますか？」\n\n// 人間: 「そうだ、その事例を忘れてた。確認してから進めて」\n```\n\n## 対話的リファクタリングの実践例\n\n### カテゴリエラーの解決（実際の事例）\n\n```typescript\n// 状況: tips.categories.ai-development が翻訳されずに表示される\n\n// ❌ 従来のAI: 即座に「修正」\nconst categories = [\n  { value: 'ai-development', label: t('categories.ai-development') }, // 追加\n]\n\n// ✅ 質問型AI:\n🤖 AI: 「カテゴリ 'ai-development' が翻訳キーとして表示されています。\n        以下の可能性を調査しました：\n        \n        1. TipsFilteredGridにカテゴリ定義が不足 → 確認済み、定義なし\n        2. 記事のカテゴリ指定が間違い → 1件該当あり\n        3. 翻訳ファイルにキーが不足 → キーは存在\n        \n        grep検索の結果、2番の可能性が高いです。\n        記事 'ai-collaboration-confirmation-rule.json' のカテゴリを\n        'ai-development' から 'ai-collaboration' に変更しますか？」\n\n人間: 「そうだね、記事のカテゴリが間違ってる。変更して」\n\n🤖 AI: 「了解です。変更後、index.jsonの同期も必要です。\n        rebuild-tips-index.jsスクリプトを実行しますか？」\n\n人間: 「はい、実行して」\n```\n\n## AIに持たせるべき「疑問力」の実装\n\n### プロンプトテンプレート\n\n```typescript\nconst refactoringPrompt = `\nあなたは慎重で質問力のあるAIアシスタントです。\nリファクタリング時は以下を実行してください：\n\n1. 変更前に必ず影響範囲を分析し、結果を報告\n2. ドキュメント（CLAUDE.md、README等）との矛盾をチェック\n3. 疑問点があれば、推測せずに質問する\n4. 段階的な実行プランを提案する\n\n以下の場合は必ず質問してください：\n- 5個以上のファイルに影響する場合\n- データ構造（JSON、DB等）を変更する場合\n- パフォーマンスに影響する可能性がある場合\n- 過去の失敗パターンと類似している場合\n- ビジネスロジックに関わる変更の場合\n\n質問の際は：\n- 調査結果を含める\n- 複数の選択肢を提示\n- 推奨案とその理由を説明\n`;\n```\n\n### 実装例：インテリジェントな確認システム\n\n```javascript\nclass RefactoringAssistant {\n  async analyzeImpact(change) {\n    const impact = {\n      files: await this.findAffectedFiles(change),\n      performance: await this.estimatePerformanceImpact(change),\n      dataIntegrity: await this.checkDataConsistency(change),\n      documentation: await this.checkDocumentationConflicts(change)\n    };\n    \n    return this.generateQuestions(impact);\n  }\n  \n  generateQuestions(impact) {\n    const questions = [];\n    \n    if (impact.files.length > 5) {\n      questions.push({\n        type: 'scope',\n        message: `この変更は${impact.files.length}個のファイルに影響します。段階的に進めますか？`,\n        options: ['段階的実行', '一括実行', '影響ファイルを確認']\n      });\n    }\n    \n    if (impact.dataIntegrity.issues.length > 0) {\n      questions.push({\n        type: 'data',\n        message: 'データの不整合を検出しました：\\n' + impact.dataIntegrity.issues.join('\\n'),\n        options: ['自動修正', '手動確認', '詳細を表示']\n      });\n    }\n    \n    return questions;\n  }\n}\n```\n\n## チームでの活用方法\n\n### AI質問ログの共有\n\n```markdown\n## AI質問ログ (2025-06-16)\n\n### Q1: カテゴリ不整合について\n状況: tips.categories.ai-development が表示される\nAIの質問: 「カテゴリ定義と記事のカテゴリ、どちらを修正すべきですか？」\n人間の回答: 「記事のカテゴリを修正」\n結果: ✅ 成功\n学習: 翻訳キーエラーは記事側の問題であることが多い\n\n### Q2: index.json の同期について\n状況: 個別ファイルを編集後\nAIの質問: 「index.json も同時に更新しますか？」\n人間の回答: 「はい、スクリプトで自動更新」\n結果: ✅ 成功\n学習: Tips/News系の変更は常にindex.jsonの同期が必要\n```\n\n### ベストプラクティスの蓄積\n\n```typescript\n// AI学習データベース\nconst refactoringPatterns = {\n  'category-error': {\n    symptoms: ['翻訳キーが表示される'],\n    questions: ['定義側か使用側か？', 'grepで使用箇所を確認したか？'],\n    solutions: ['記事のカテゴリを修正', 'カテゴリ定義を追加'],\n    preferred: 0 // 最初の解決策を優先\n  },\n  \n  'data-sync': {\n    symptoms: ['index.jsonと個別ファイルの不一致'],\n    questions: ['どちらが正しい状態か？', 'スクリプトで同期するか？'],\n    solutions: ['rebuild-index.js実行', '手動で修正'],\n    preferred: 0\n  }\n};\n```\n\n## 守りから攻めへ：プロアクティブな品質管理\n\n### 従来のアプローチ（守り）\n- チェックリストに従う\n- 慎重に一歩ずつ\n- 人間が全て判断\n- 問題が起きたら対処\n\n### 新しいアプローチ（攻め）\n- AIが積極的に矛盾を検出\n- 疑問があれば即座に質問\n- 対話を通じて最適解を探る\n- 過去の経験から学習\n- 問題を未然に防ぐ\n\n### 理想的な協働の例\n\n```\n人間: 「このエラーを修正して」\n\n🤖 AI: 「エラーを分析しました。3つの解決方法があります：\n        1. コンポーネントにカテゴリを追加（簡単だが本質的でない）\n        2. 記事のカテゴリを修正（根本解決）\n        3. 翻訳ファイルにキーを追加（不要な可能性大）\n        \n        過去の事例では方法1で副作用が発生しました。\n        方法2を推奨しますが、いかがですか？」\n\n人間: 「方法2で。影響範囲は？」\n\n🤖 AI: 「1つの記事ファイルとindex.jsonです。\n        先に記事を修正してから、index.jsonを\n        再生成スクリプトで更新します。進めますか？」\n\n人間: 「OK、進めて」\n\n🤖 AI: 「完了しました。念のため確認：\n        - 記事のカテゴリ: ✅ 修正済み\n        - index.json: ✅ 同期済み\n        - ブラウザ表示: 確認をお願いします」\n```\n\n## まとめ：AIの疑問力が品質を守る\n\nAIに「疑問力」を持たせることで：\n\n1. **問題の未然防止**: 実行前に潜在的な問題を発見\n2. **学習の蓄積**: 質問と回答のログが知識ベースに\n3. **効率的な協働**: 人間の判断が必要な箇所だけ確認\n4. **品質の向上**: 多角的な視点からの検証\n\n重要なのは、AIを単なる実行者ではなく、**思慮深いパートナー**として活用することです。",
    "en": "## Why AI Should Ask Questions\n\nCase from June 16, 2025: On a functioning Tips page, AI attempted a \"fix\" that broke data integrity. If AI had first asked \"What do you think is the root cause of this error?\", this problem could have been prevented.\n\n## 5 Times When AI Should Ask Questions\n\n### 1. When Finding Contradictions with Documentation\n\n```typescript\n// 🤖 AI: \"CLAUDE.md states 'always use design system',\n//         but this component uses direct Tailwind classes.\n//         Should I add it to the design system first?\"\n\nconst Component = () => (\n  <h1 className=\"text-3xl font-bold\">Title</h1>  // Contradiction detected\n)\n\n// Human: \"Yes, let's add it to the design system first\"\n```\n\n### 2. When Changes Have Large Impact\n\n```bash\n# 🤖 AI: \"This change affects 23 files.\n#         Should we proceed gradually or all at once?\n#         Would you like to see the list of affected files?\"\n\n# Human: \"Show me the list. Let's prioritize and go gradually\"\n```\n\n### 3. When Finding Data Inconsistencies\n\n```javascript\n// 🤖 AI: \"index.json has 15 articles,\n//         but the articles folder has 17 files.\n//         Which is the correct state? Should I sync them?\"\n\n// Human: \"File system is correct. Regenerate index.json\"\n```\n\n### 4. When Performance Concerns Arise\n\n```typescript\n// 🤖 AI: \"This refactoring increases bundle size by 15%.\n//         Should we consider code splitting? Or is this acceptable?\"\n\n// Human: \"15% is too much. Analyze the main causes\"\n```\n\n### 5. When Similar to Past Failure Patterns\n\n```javascript\n// 🤖 AI: \"Documentation shows a similar case where\n//         index.json sync was broken.\n//         Should we verify both individual files\n//         and index.json before proceeding?\"\n\n// Human: \"Right, I forgot about that case. Verify before proceeding\"\n```\n\n## Practical Example of Interactive Refactoring\n\n### Solving Category Error (Real Case)\n\n```typescript\n// Situation: tips.categories.ai-development displayed without translation\n\n// ❌ Traditional AI: Immediate \"fix\"\nconst categories = [\n  { value: 'ai-development', label: t('categories.ai-development') }, // Added\n]\n\n// ✅ Question-based AI:\n🤖 AI: \"Category 'ai-development' is displayed as a translation key.\n        I've investigated these possibilities:\n        \n        1. Missing category definition in TipsFilteredGrid → Confirmed, not defined\n        2. Wrong category in article → Found 1 match\n        3. Missing key in translation file → Key exists\n        \n        Based on grep search, #2 seems most likely.\n        Should I change the category in 'ai-collaboration-confirmation-rule.json'\n        from 'ai-development' to 'ai-collaboration'?\"\n\nHuman: \"Yes, the article category is wrong. Change it\"\n\n🤖 AI: \"Understood. After changing, index.json needs syncing too.\n        Should I run the rebuild-tips-index.js script?\"\n\nHuman: \"Yes, run it\"\n```\n\n## Implementing AI's \"Questioning Power\"\n\n### Prompt Template\n\n```typescript\nconst refactoringPrompt = `\nYou are a careful AI assistant with strong questioning skills.\nDuring refactoring:\n\n1. Always analyze and report impact before changes\n2. Check for contradictions with documentation (CLAUDE.md, README, etc.)\n3. Ask questions instead of making assumptions\n4. Propose gradual execution plans\n\nAlways ask when:\n- Affecting 5+ files\n- Changing data structures (JSON, DB, etc.)\n- Potential performance impact\n- Similar to past failure patterns\n- Changes involve business logic\n\nWhen asking questions:\n- Include investigation results\n- Present multiple options\n- Explain recommendations with reasons\n`;\n```\n\n### Implementation: Intelligent Confirmation System\n\n```javascript\nclass RefactoringAssistant {\n  async analyzeImpact(change) {\n    const impact = {\n      files: await this.findAffectedFiles(change),\n      performance: await this.estimatePerformanceImpact(change),\n      dataIntegrity: await this.checkDataConsistency(change),\n      documentation: await this.checkDocumentationConflicts(change)\n    };\n    \n    return this.generateQuestions(impact);\n  }\n  \n  generateQuestions(impact) {\n    const questions = [];\n    \n    if (impact.files.length > 5) {\n      questions.push({\n        type: 'scope',\n        message: `This change affects ${impact.files.length} files. Proceed gradually?`,\n        options: ['Gradual execution', 'Bulk execution', 'View affected files']\n      });\n    }\n    \n    if (impact.dataIntegrity.issues.length > 0) {\n      questions.push({\n        type: 'data',\n        message: 'Data inconsistencies detected:\\n' + impact.dataIntegrity.issues.join('\\n'),\n        options: ['Auto-fix', 'Manual review', 'Show details']\n      });\n    }\n    \n    return questions;\n  }\n}\n```\n\n## Team Collaboration\n\n### Sharing AI Question Logs\n\n```markdown\n## AI Question Log (2025-06-16)\n\n### Q1: About category inconsistency\nSituation: tips.categories.ai-development displayed\nAI Question: \"Should I fix category definition or article category?\"\nHuman Answer: \"Fix article category\"\nResult: ✅ Success\nLearning: Translation key errors often originate from article side\n\n### Q2: About index.json sync\nSituation: After editing individual files\nAI Question: \"Should I update index.json too?\"\nHuman Answer: \"Yes, auto-update with script\"\nResult: ✅ Success\nLearning: Tips/News changes always need index.json sync\n```\n\n### Accumulating Best Practices\n\n```typescript\n// AI learning database\nconst refactoringPatterns = {\n  'category-error': {\n    symptoms: ['Translation key displayed'],\n    questions: ['Definition side or usage side?', 'Did you grep for usage?'],\n    solutions: ['Fix article category', 'Add category definition'],\n    preferred: 0 // Prefer first solution\n  },\n  \n  'data-sync': {\n    symptoms: ['index.json and individual files mismatch'],\n    questions: ['Which is correct state?', 'Sync with script?'],\n    solutions: ['Run rebuild-index.js', 'Manual fix'],\n    preferred: 0\n  }\n};\n```\n\n## From Defense to Offense: Proactive Quality Management\n\n### Traditional Approach (Defense)\n- Follow checklists\n- Careful step-by-step\n- Human makes all decisions\n- Deal with problems after they occur\n\n### New Approach (Offense)\n- AI actively detects contradictions\n- Asks questions immediately when in doubt\n- Explores optimal solutions through dialogue\n- Learns from past experiences\n- Prevents problems before they happen\n\n### Example of Ideal Collaboration\n\n```\nHuman: \"Fix this error\"\n\n🤖 AI: \"I've analyzed the error. There are 3 solutions:\n        1. Add category to component (easy but not fundamental)\n        2. Fix article category (root solution)\n        3. Add key to translation file (likely unnecessary)\n        \n        Past cases show method 1 caused side effects.\n        I recommend method 2. What do you think?\"\n\nHuman: \"Go with method 2. What's the impact?\"\n\n🤖 AI: \"One article file and index.json.\n        I'll fix the article first, then update index.json\n        with the regeneration script. Shall I proceed?\"\n\nHuman: \"OK, go ahead\"\n\n🤖 AI: \"Completed. Final check:\n        - Article category: ✅ Fixed\n        - index.json: ✅ Synced\n        - Browser display: Please verify\"\n```\n\n## Summary: AI's Questioning Power Protects Quality\n\nBy giving AI \"questioning power\":\n\n1. **Problem Prevention**: Discover potential issues before execution\n2. **Knowledge Accumulation**: Q&A logs become knowledge base\n3. **Efficient Collaboration**: Human input only where needed\n4. **Quality Improvement**: Verification from multiple perspectives\n\nThe key is to use AI not just as an executor, but as a **thoughtful partner**."
  }
}