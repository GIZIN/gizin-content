{
  "id": "claude-memory-import-usage",
  "date": "2025-06-19",
  "category": "claude-code",
  "difficulty": "intermediate",
  "tags": ["Claude Code", "開発効率化", "AI協働", "設定管理"],
  "versions": {
    "ja": {
      "title": "Claude Codeのユーザーメモリと@importの使い分け完全ガイド",
      "excerpt": "Claude Codeには2つの強力な設定管理機能があります。個人の作業スタイルを管理する「ユーザーメモリ」と、プロジェクト間で共有できる「@import」。これらを適切に使い分けることで、AI協働開発の効率が劇的に向上します。",
      "description": "Claude Codeには2つの強力な設定管理機能があります。個人の作業スタイルを管理する「ユーザーメモリ」と、プロジェクト間で共有できる「@import」。これらを適切に使い分けることで、AI協働開発の効率が劇的に向上します。",
      "content": "## はじめに\n\nClaude Codeを使った開発で、「毎回同じルールを説明するのが面倒」「チーム全体で統一されたルールを適用したい」と感じたことはありませんか？\n\nClaude Codeには、この問題を解決する2つの強力な機能があります：\n- **ユーザーメモリ**（`~/.claude/CLAUDE.md`）\n- **@import機能**（プロジェクトごとの設定読み込み）\n\n本記事では、これらの機能の違いと、効果的な使い分け方法を実例付きで解説します。\n\n## ユーザーメモリとは？\n\n### ユーザーメモリの概要\nユーザーメモリは、あなたの個人的な開発スタイルや作業ルールを記録する場所です。`~/.claude/CLAUDE.md`に保存され、どのプロジェクトでも自動的に適用されます。\n\n### 特徴\n- **自動読み込み**: 設定不要で全プロジェクトに適用\n- **プライベート**: Gitにコミットされない個人設定\n- **即時反映**: 一箇所更新すれば全プロジェクトに反映\n- **場所**: `~/.claude/CLAUDE.md`\n\n### 向いている内容\n```markdown\n# ユーザーメモリに適した内容の例\n\n## 作業管理ルール\n- 「中締め」: ドキュメント更新 + 日報更新\n- 「締め」: 中締め + git commit + push\n\n## 個人的な開発スタイル\n- 質問型AI協働の原則\n- 4行以内での簡潔な回答を好む\n- 絵文字は使わない\n\n## 日報の書き方\n- セッション管理のフォーマット\n- 作業時間の記録方法\n```\n\n## @import機能とは？\n\n### @import機能の概要\n@import機能は、共有可能なルールセットを別ファイルから読み込む機能です。プロジェクトのCLAUDE.mdに記述して使用します。\n\n### 特徴\n- **明示的**: 必要なルールだけを選択的に読み込み\n- **共有可能**: チーム全体で同じルールを使える\n- **バージョン管理**: Gitで履歴管理可能\n- **モジュラー**: ルールを小さな単位で管理\n\n### 向いている内容\n```markdown\n# @importに適した内容の例\n\n## プロジェクトタイプ別設定\n- SaaS共通設定\n- ランディングページ設定\n- ECサイト設定\n\n## 技術的な規約\n- コーディング規約\n- セキュリティプラクティス\n- Git運用ルール\n\n## フレームワーク固有設定\n- Next.js開発規約\n- Vue.js開発規約\n```\n\n## 実践的な使い分け方法\n\n### 理想的なディレクトリ構成\n\n```\nあなたの開発環境/\n├── .claude/\n│   └── CLAUDE.md          # 個人的な作業スタイル\n├── shared-rules/          # 共有ルールライブラリ\n│   ├── saas-common.md     # SaaS共通設定\n│   ├── landing-page.md    # LP共通設定\n│   ├── ecommerce.md       # EC共通設定\n│   ├── nextjs-rules.md    # Next.js規約\n│   └── security.md        # セキュリティ規約\n└── projects/\n    ├── project-a/\n    │   └── CLAUDE.md      # @importでルールを組み合わせ\n    └── project-b/\n        └── CLAUDE.md\n```\n\n### プロジェクトでの組み合わせ例\n\n#### SaaSプロジェクトの場合\n```markdown\n# project-a/CLAUDE.md\n\n# SaaSプロジェクト設定\n\n## 共通ルールの読み込み\n@import ../../shared-rules/saas-common.md\n@import ../../shared-rules/nextjs-rules.md\n@import ../../shared-rules/security.md\n\n## このプロジェクト固有の設定\n- API認証: JWT\n- デプロイ先: Vercel\n- DB: PostgreSQL + Prisma\n```\n\n#### ランディングページの場合\n```markdown\n# project-b/CLAUDE.md\n\n# ランディングページ設定\n\n## 共通ルールの読み込み\n@import ../../shared-rules/landing-page.md\n@import ../../shared-rules/nextjs-rules.md\n\n## このプロジェクト固有の設定\n- 静的生成のみ使用\n- アニメーション: Framer Motion\n- フォーム: Resend連携\n```\n\n## 使い分けの判断基準\n\n### ユーザーメモリを選ぶべき場合\n\n1. **個人的な作業習慣**\n   - 「中締め」「締め」などの作業管理用語\n   - 日報の書き方\n   - AIへの質問スタイル\n\n2. **どのプロジェクトでも使うルール**\n   - 簡潔な回答を求める設定\n   - エラー時の対応方法\n   - 個人的なコーディングスタイル\n\n3. **秘密にしたい情報**\n   - 個人的なメモ\n   - 特定クライアントの情報\n\n### @importを選ぶべき場合\n\n1. **チームで共有すべきルール**\n   - コーディング規約\n   - Gitコミットメッセージ形式\n   - PRの作成ルール\n\n2. **プロジェクトタイプ別の設定**\n   - SaaS特有の設定\n   - LP特有の最適化ルール\n   - EC特有のセキュリティ設定\n\n3. **技術スタック固有の設定**\n   - フレームワーク別のベストプラクティス\n   - ライブラリの使用規約\n   - デプロイ環境別の設定\n\n## 実装のベストプラクティス\n\n### 1. 階層的な構成\n```\n個人設定（ユーザーメモリ）\n└── 共通技術設定（@import）\n    └── プロジェクトタイプ設定（@import）\n        └── プロジェクト固有設定（CLAUDE.md直接記述）\n```\n\n### 2. ルールの粒度\n- **大きすぎず小さすぎず**: 1ファイル1テーマ程度\n- **再利用性を考慮**: 他のプロジェクトでも使えるか\n- **メンテナンス性**: 更新頻度を考慮\n\n### 3. ネーミングルール\n```\n# 良い例\nsaas-common.md         # 用途が明確\nnextjs-rules.md        # 技術が明確\nsecurity-practices.md  # 内容が明確\n\n# 避けるべき例\nrules1.md             # 内容が不明\nmisc.md               # 範囲が不明確\ntemp.md               # 一時的な印象\n```\n\n## トラブルシューティング\n\n### Q: ユーザーメモリが反映されない\nA: CLAUDEのメモリ機能が有効になっているか確認してください。また、ファイルパスが正しいか確認してください。\n\n### Q: @importが機能しない\nA: 相対パスが正しいか、ファイルが存在するか確認してください。`../`の数に注意。\n\n### Q: ルールが競合する場合は？\nA: 後から読み込まれたルールが優先されます。プロジェクト固有 > @import > ユーザーメモリの順。\n\n## まとめ\n\nClaude Codeのユーザーメモリと@import機能を適切に使い分けることで：\n\n1. **個人の生産性向上**: よく使うルールを自動適用\n2. **チームの一貫性**: 共通ルールを簡単に共有\n3. **メンテナンス性**: ルールの更新が容易\n4. **柔軟性**: プロジェクトごとに最適な設定\n\nこれらの機能を活用して、より効率的なAI協働開発を実現しましょう！\n\n## 関連リソース\n\n- [Claude Code公式ドキュメント](https://docs.anthropic.com/en/docs/claude-code)\n- [AIとの対話的リファクタリング](/ja/tips/ai-proactive-refactoring-dialogue)\n- [AIが陥る設計パラドックス](/ja/tips/ai-design-system-paradox)"
    },
    "en": {
      "title": "Complete Guide to Claude Code User Memory vs @import Usage",
      "excerpt": "Claude Code has two powerful configuration management features: 'User Memory' for personal work styles and '@import' for sharing across projects. Learn how to use them effectively to dramatically improve your AI-assisted development efficiency.",
      "description": "Claude Code has two powerful configuration management features: 'User Memory' for personal work styles and '@import' for sharing across projects. Learn how to use them effectively to dramatically improve your AI-assisted development efficiency.",
      "content": "## Introduction\n\nWhen developing with Claude Code, have you ever felt frustrated explaining the same rules repeatedly or wished for unified rules across your team?\n\nClaude Code offers two powerful features to solve these problems:\n- **User Memory** (`~/.claude/CLAUDE.md`)\n- **@import feature** (project-specific configuration loading)\n\nThis article explains the differences between these features and how to use them effectively with practical examples.\n\n## What is User Memory?\n\n### Overview\nUser Memory is where you record your personal development style and work rules. Stored in `~/.claude/CLAUDE.md`, it's automatically applied to all projects.\n\n### Features\n- **Auto-loading**: Applied to all projects without configuration\n- **Private**: Personal settings not committed to Git\n- **Instant reflection**: Update once, apply everywhere\n- **Location**: `~/.claude/CLAUDE.md`\n\n### Suitable Content\n```markdown\n# Examples suitable for User Memory\n\n## Work Management Rules\n- 'Mid-close': Document update + daily report update\n- 'Close': Mid-close + git commit + push\n\n## Personal Development Style\n- Principles of question-based AI collaboration\n- Prefer concise answers within 4 lines\n- Don't use emojis\n\n## Daily Report Format\n- Session management format\n- Work time recording method\n```\n\n## What is @import Feature?\n\n### Overview\nThe @import feature loads shareable rule sets from separate files. Used by writing in the project's CLAUDE.md.\n\n### Features\n- **Explicit**: Selectively load only needed rules\n- **Shareable**: Use same rules across team\n- **Version controlled**: Manage history with Git\n- **Modular**: Manage rules in small units\n\n### Suitable Content\n```markdown\n# Examples suitable for @import\n\n## Project Type Settings\n- SaaS common settings\n- Landing page settings\n- E-commerce site settings\n\n## Technical Standards\n- Coding standards\n- Security practices\n- Git operation rules\n\n## Framework-specific Settings\n- Next.js development standards\n- Vue.js development standards\n```\n\n## Practical Usage Patterns\n\n### Ideal Directory Structure\n\n```\nYour Development Environment/\n├── .claude/\n│   └── CLAUDE.md          # Personal work style\n├── shared-rules/          # Shared rule library\n│   ├── saas-common.md     # SaaS common settings\n│   ├── landing-page.md    # LP common settings\n│   ├── ecommerce.md       # E-commerce settings\n│   ├── nextjs-rules.md    # Next.js standards\n│   └── security.md        # Security standards\n└── projects/\n    ├── project-a/\n    │   └── CLAUDE.md      # Combine rules with @import\n    └── project-b/\n        └── CLAUDE.md\n```\n\n### Project Combination Examples\n\n#### For SaaS Projects\n```markdown\n# project-a/CLAUDE.md\n\n# SaaS Project Settings\n\n## Load Common Rules\n@import ../../shared-rules/saas-common.md\n@import ../../shared-rules/nextjs-rules.md\n@import ../../shared-rules/security.md\n\n## Project-specific Settings\n- API Authentication: JWT\n- Deployment: Vercel\n- DB: PostgreSQL + Prisma\n```\n\n#### For Landing Pages\n```markdown\n# project-b/CLAUDE.md\n\n# Landing Page Settings\n\n## Load Common Rules\n@import ../../shared-rules/landing-page.md\n@import ../../shared-rules/nextjs-rules.md\n\n## Project-specific Settings\n- Static generation only\n- Animation: Framer Motion\n- Forms: Resend integration\n```\n\n## Decision Criteria\n\n### When to Choose User Memory\n\n1. **Personal Work Habits**\n   - Work management terms like 'mid-close', 'close'\n   - Daily report writing style\n   - AI interaction style\n\n2. **Rules Used in Every Project**\n   - Preference for concise answers\n   - Error handling methods\n   - Personal coding style\n\n3. **Private Information**\n   - Personal notes\n   - Specific client information\n\n### When to Choose @import\n\n1. **Team-shared Rules**\n   - Coding standards\n   - Git commit message format\n   - PR creation rules\n\n2. **Project Type-specific Settings**\n   - SaaS-specific settings\n   - LP-specific optimization rules\n   - E-commerce security settings\n\n3. **Tech Stack-specific Settings**\n   - Framework best practices\n   - Library usage guidelines\n   - Deployment environment settings\n\n## Implementation Best Practices\n\n### 1. Hierarchical Structure\n```\nPersonal Settings (User Memory)\n└── Common Tech Settings (@import)\n    └── Project Type Settings (@import)\n        └── Project-specific Settings (Direct in CLAUDE.md)\n```\n\n### 2. Rule Granularity\n- **Not too big, not too small**: About 1 theme per file\n- **Consider reusability**: Can it be used in other projects?\n- **Maintainability**: Consider update frequency\n\n### 3. Naming Rules\n```\n# Good Examples\nsaas-common.md         # Clear purpose\nnextjs-rules.md        # Clear technology\nsecurity-practices.md  # Clear content\n\n# Avoid\nrules1.md             # Unclear content\nmisc.md               # Unclear scope\ntemp.md               # Temporary impression\n```\n\n## Troubleshooting\n\n### Q: User Memory not applying?\nA: Check if CLAUDE memory feature is enabled and verify the file path is correct.\n\n### Q: @import not working?\nA: Check if relative paths are correct and files exist. Pay attention to the number of `../`.\n\n### Q: What if rules conflict?\nA: Later-loaded rules take precedence. Order: Project-specific > @import > User Memory.\n\n## Conclusion\n\nBy properly using Claude Code's User Memory and @import features:\n\n1. **Improved Personal Productivity**: Auto-apply frequently used rules\n2. **Team Consistency**: Easily share common rules\n3. **Maintainability**: Easy rule updates\n4. **Flexibility**: Optimal settings per project\n\nLeverage these features for more efficient AI-assisted development!\n\n## Related Resources\n\n- [Claude Code Official Documentation](https://docs.anthropic.com/en/docs/claude-code)\n- [Interactive Refactoring with AI](/en/tips/ai-proactive-refactoring-dialogue)\n- [The Design System Paradox AI Falls Into](/en/tips/ai-design-system-paradox)"
    }
  }
}