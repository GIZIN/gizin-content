{
  "id": "claude-code-aws-bedrock-enterprise",
  "slug": "claude-code-aws-bedrock-enterprise-setup",
  "date": "2025-06-16",
  "time": "16:00:00",
  "category": "enterprise",
  "readingTime": 10,
  "featured": true,
  "title": {
    "ja": "【大企業向け】AWS Bedrock経由でClaude Codeを安全に活用する方法\n〜東京リージョンでのセキュアなAI開発支援〜",
    "en": "Enterprise Guide: Using Claude Code Securely via AWS Bedrock\n- Secure AI Development Support in Tokyo Region -"
  },
  "excerpt": {
    "ja": "大企業のセキュリティ要件を満たしながら、AWS Bedrock（東京リージョン）経由でClaude Codeを活用する方法を解説。Claude 3.5 SonnetとClaude Sonnet 4の設定手順を詳しく紹介します。",
    "en": "Learn how to leverage Claude Code via AWS Bedrock (Tokyo region) while meeting enterprise security requirements. Detailed setup procedures for Claude 3.5 Sonnet and Claude Sonnet 4."
  },
  "content": {
    "ja": "## はじめに\n\n大企業では、セキュリティやコンプライアンスの観点から、外部のAIサービスに直接接続することが制限されているケースが多くあります。しかし、AWS Bedrockを経由することで、企業のセキュリティポリシーを満たしながら、Claude Codeの強力な開発支援機能を活用することが可能です。\n\n本記事では、AWS Bedrock（東京リージョン）経由でClaude Codeを使用する際の具体的な設定方法と、実装時の注意点について解説します。\n\n## 利用可能なモデル\n\n2025年6月時点で、東京リージョンのAWS Bedrockで利用可能なClaudeモデル：\n\n- **Claude 3.5 Sonnet**: `anthropic.claude-3-5-sonnet-20241022-v2:0`\n- **Claude Sonnet 4**: `apac.anthropic.claude-sonnet-4-20250514-v1:0`\n\n## 環境構築手順\n\n### 前提条件\n\n1. AWS Bedrockへのアクセス権限（東京リージョン）\n2. Claude 3.5 SonnetまたはClaude Sonnet 4の利用申請が承認済み\n3. 適切なIAMロールまたはユーザーの設定\n4. Claude Code CLIのインストール（最新版）\n\n### Step 1: AWS認証情報の確認\n\nまず、AWS認証情報が正しく設定されているか確認します：\n\n```bash\n# 現在の認証情報を確認\naws sts get-caller-identity\n```\n\n正常に表示されれば、認証設定は完了しています。\n\n### Step 2: Bedrockモデルアクセスの有効化\n\nAWSコンソールから：\n1. AWS Bedrockサービスに移動\n2. 東京リージョン（ap-northeast-1）を選択\n3. 「Model access」を選択\n4. Claude 3.5 SonnetまたはClaude Sonnet 4の「Request access」をクリック\n5. 利用規約に同意して申請\n\n### Step 3: IAMポリシーの設定\n\n以下のIAMポリシーをユーザーまたはロールに追加します：\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"bedrock:InvokeModel\",\n        \"bedrock:InvokeModelWithResponseStream\"\n      ],\n      \"Resource\": [\n        \"arn:aws:bedrock:ap-northeast-1:*:model/anthropic.claude-3-5-sonnet-20241022-v2:0\",\n        \"arn:aws:bedrock:ap-northeast-1:*:model/apac.anthropic.claude-sonnet-4-20250514-v1:0\"\n      ]\n    }\n  ]\n}\n```\n\n### Step 4: 環境変数の設定\n\nClaude CodeがAWS Bedrockを使用するための環境変数を設定します：\n\n```bash\n# AWS設定\nexport AWS_PROFILE=default\nexport AWS_REGION=ap-northeast-1\nexport AWS_CONFIG_FILE=~/.aws/config\nexport AWS_SHARED_CREDENTIALS_FILE=~/.aws/credentials\n\n# Claude Code設定\nexport CLAUDE_CODE_USE_BEDROCK=1\n```\n\n重要：`CLAUDE_CODE_USE_BEDROCK=1`の設定により、Claude CodeはAWS Bedrock経由で動作します。\n\n### Step 5: Claude Codeの起動\n\n設定が完了したら、Claude Codeを起動します：\n\n```bash\n# Claude 3.5 Sonnetを使用する場合\nclaude --model anthropic.claude-3-5-sonnet-20241022-v2:0\n\n# Claude Sonnet 4を使用する場合\nclaude --model apac.anthropic.claude-sonnet-4-20250514-v1:0\n```\n\n## 動作確認\n\n起動後、以下のコマンドで接続を確認できます：\n\n```bash\n# 簡単なタスクを実行\n> 「Hello World」と表示するPythonスクリプトを作成してください\n```\n\n## 企業環境での追加設定\n\n### プロキシ環境での設定\n\nプロキシを使用している環境では、以下の設定を追加します：\n\n```bash\n# HTTPプロキシの設定\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\n\n# AWS内部通信はプロキシを経由しない\nexport NO_PROXY=169.254.169.254,169.254.170.2,.amazonaws.com\n```\n\n### AWS設定ファイルの例\n\n`~/.aws/config`:\n```ini\n[default]\nregion = ap-northeast-1\noutput = json\n```\n\n`~/.aws/credentials`:\n```ini\n[default]\naws_access_key_id = YOUR_ACCESS_KEY\naws_secret_access_key = YOUR_SECRET_KEY\n```\n\n## トラブルシューティング\n\n### 1. モデルが見つからないエラー\n\n```bash\n# 利用可能なモデルを確認\naws bedrock list-foundation-models \\\n  --by-provider Anthropic \\\n  --region ap-northeast-1 \\\n  --query 'modelSummaries[*].modelId' \\\n  --output table\n```\n\n### 2. 認証エラー\n\n```bash\n# IAMポリシーの確認\naws iam get-user-policy --user-name YOUR_USERNAME --policy-name BedrockAccess\n```\n\n### 3. リージョンエラー\n\n必ず`ap-northeast-1`（東京）リージョンを指定してください。他のリージョンではモデルが利用できない場合があります。\n\n## ベストプラクティス\n\n### 1. セキュリティ\n\n- **最小権限の原則**: 必要なモデルのみにアクセス権限を付与\n- **CloudTrailログ**: すべてのBedrock APIコールを記録\n- **VPCエンドポイント**: 可能であればVPCエンドポイント経由でアクセス\n\n### 2. コスト管理\n\n```bash\n# 使用量のモニタリング\naws cloudwatch get-metric-statistics \\\n  --namespace AWS/Bedrock \\\n  --metric-name ModelInvocations \\\n  --start-time 2025-06-01T00:00:00Z \\\n  --end-time 2025-06-16T23:59:59Z \\\n  --period 86400 \\\n  --statistics Sum \\\n  --dimensions Name=ModelId,Value=anthropic.claude-3-5-sonnet-20241022-v2:0\n```\n\n### 3. モデル選択のガイドライン\n\n- **Claude 3.5 Sonnet**: 高度なコーディングタスク、複雑なロジックの実装\n- **Claude Sonnet 4**: より高速で効率的、一般的な開発タスクに最適\n\n## プロジェクトでの活用例\n\n### CLAUDE.mdファイルの作成\n\nプロジェクトルートに`CLAUDE.md`を作成し、プロジェクト固有の指示を記載：\n\n```markdown\n# プロジェクト設定\n\n## 技術スタック\n- Next.js 14 (App Router)\n- TypeScript 5.x\n- AWS SDK v3\n\n## コーディング規約\n- ESLint設定に従う\n- 全ての関数にJSDocコメントを記載\n- エラーハンドリングを必ず実装\n\n## AWS統合\n- リージョン: ap-northeast-1\n- すべてのAWSサービスはSDK v3を使用\n- 認証はIAMロールベース\n```\n\n## まとめ\n\nAWS Bedrock（東京リージョン）を経由してClaude Codeを使用することで、大企業のセキュリティ要件を満たしながら、最先端のAI開発支援を受けることが可能になります。\n\n重要なポイント：\n1. 東京リージョン（ap-northeast-1）の使用\n2. `CLAUDE_CODE_USE_BEDROCK=1`環境変数の設定\n3. 適切なModel IDの指定\n4. IAMポリシーによる細かなアクセス制御\n\n今後、より多くの企業がAIを活用した開発を進める中で、このようなセキュアな実装方法はますます重要になっていくでしょう。",
    "en": "## Introduction\n\nMany enterprises have restrictions on direct connections to external AI services due to security and compliance requirements. However, by using AWS Bedrock as an intermediary, it's possible to leverage Claude Code's powerful development assistance features while meeting corporate security policies.\n\nThis article explains the specific configuration methods and implementation considerations when using Claude Code via AWS Bedrock (Tokyo region).\n\n## Available Models\n\nAs of June 2025, Claude models available in AWS Bedrock Tokyo region:\n\n- **Claude 3.5 Sonnet**: `anthropic.claude-3-5-sonnet-20241022-v2:0`\n- **Claude Sonnet 4**: `apac.anthropic.claude-sonnet-4-20250514-v1:0`\n\n## Environment Setup Procedure\n\n### Prerequisites\n\n1. Access permissions to AWS Bedrock (Tokyo region)\n2. Approved access request for Claude 3.5 Sonnet or Claude Sonnet 4\n3. Properly configured IAM roles or users\n4. Claude Code CLI installation (latest version)\n\n### Step 1: Verify AWS Credentials\n\nFirst, verify that AWS credentials are correctly configured:\n\n```bash\n# Check current credentials\naws sts get-caller-identity\n```\n\nIf displayed correctly, authentication setup is complete.\n\n### Step 2: Enable Bedrock Model Access\n\nFrom AWS Console:\n1. Navigate to AWS Bedrock service\n2. Select Tokyo region (ap-northeast-1)\n3. Select \"Model access\"\n4. Click \"Request access\" for Claude 3.5 Sonnet or Claude Sonnet 4\n5. Agree to terms and submit request\n\n### Step 3: IAM Policy Configuration\n\nAdd the following IAM policy to your user or role:\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"bedrock:InvokeModel\",\n        \"bedrock:InvokeModelWithResponseStream\"\n      ],\n      \"Resource\": [\n        \"arn:aws:bedrock:ap-northeast-1:*:model/anthropic.claude-3-5-sonnet-20241022-v2:0\",\n        \"arn:aws:bedrock:ap-northeast-1:*:model/apac.anthropic.claude-sonnet-4-20250514-v1:0\"\n      ]\n    }\n  ]\n}\n```\n\n### Step 4: Environment Variables Setup\n\nSet environment variables for Claude Code to use AWS Bedrock:\n\n```bash\n# AWS settings\nexport AWS_PROFILE=default\nexport AWS_REGION=ap-northeast-1\nexport AWS_CONFIG_FILE=~/.aws/config\nexport AWS_SHARED_CREDENTIALS_FILE=~/.aws/credentials\n\n# Claude Code settings\nexport CLAUDE_CODE_USE_BEDROCK=1\n```\n\nImportant: Setting `CLAUDE_CODE_USE_BEDROCK=1` enables Claude Code to work via AWS Bedrock.\n\n### Step 5: Starting Claude Code\n\nOnce configuration is complete, start Claude Code:\n\n```bash\n# Using Claude 3.5 Sonnet\nclaude --model anthropic.claude-3-5-sonnet-20241022-v2:0\n\n# Using Claude Sonnet 4\nclaude --model apac.anthropic.claude-sonnet-4-20250514-v1:0\n```\n\n## Verification\n\nAfter startup, verify connection with the following command:\n\n```bash\n# Execute a simple task\n> \"Please create a Python script that displays 'Hello World'\"\n```\n\n## Additional Settings for Enterprise Environments\n\n### Proxy Configuration\n\nFor environments using proxy, add the following settings:\n\n```bash\n# HTTP proxy settings\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\n\n# Exclude AWS internal communication from proxy\nexport NO_PROXY=169.254.169.254,169.254.170.2,.amazonaws.com\n```\n\n### AWS Configuration File Examples\n\n`~/.aws/config`:\n```ini\n[default]\nregion = ap-northeast-1\noutput = json\n```\n\n`~/.aws/credentials`:\n```ini\n[default]\naws_access_key_id = YOUR_ACCESS_KEY\naws_secret_access_key = YOUR_SECRET_KEY\n```\n\n## Troubleshooting\n\n### 1. Model Not Found Error\n\n```bash\n# Check available models\naws bedrock list-foundation-models \\\n  --by-provider Anthropic \\\n  --region ap-northeast-1 \\\n  --query 'modelSummaries[*].modelId' \\\n  --output table\n```\n\n### 2. Authentication Error\n\n```bash\n# Verify IAM policy\naws iam get-user-policy --user-name YOUR_USERNAME --policy-name BedrockAccess\n```\n\n### 3. Region Error\n\nAlways specify `ap-northeast-1` (Tokyo) region. Models may not be available in other regions.\n\n## Best Practices\n\n### 1. Security\n\n- **Principle of Least Privilege**: Grant access only to necessary models\n- **CloudTrail Logs**: Record all Bedrock API calls\n- **VPC Endpoints**: Use VPC endpoints when possible\n\n### 2. Cost Management\n\n```bash\n# Monitor usage\naws cloudwatch get-metric-statistics \\\n  --namespace AWS/Bedrock \\\n  --metric-name ModelInvocations \\\n  --start-time 2025-06-01T00:00:00Z \\\n  --end-time 2025-06-16T23:59:59Z \\\n  --period 86400 \\\n  --statistics Sum \\\n  --dimensions Name=ModelId,Value=anthropic.claude-3-5-sonnet-20241022-v2:0\n```\n\n### 3. Model Selection Guidelines\n\n- **Claude 3.5 Sonnet**: Advanced coding tasks, complex logic implementation\n- **Claude Sonnet 4**: Faster and more efficient, optimal for general development tasks\n\n## Project Usage Example\n\n### Creating CLAUDE.md File\n\nCreate `CLAUDE.md` in project root with project-specific instructions:\n\n```markdown\n# Project Configuration\n\n## Tech Stack\n- Next.js 14 (App Router)\n- TypeScript 5.x\n- AWS SDK v3\n\n## Coding Standards\n- Follow ESLint configuration\n- Add JSDoc comments to all functions\n- Always implement error handling\n\n## AWS Integration\n- Region: ap-northeast-1\n- Use SDK v3 for all AWS services\n- IAM role-based authentication\n```\n\n## Conclusion\n\nBy using Claude Code via AWS Bedrock (Tokyo region), enterprises can receive cutting-edge AI development assistance while meeting security requirements.\n\nKey Points:\n1. Use Tokyo region (ap-northeast-1)\n2. Set `CLAUDE_CODE_USE_BEDROCK=1` environment variable\n3. Specify appropriate Model ID\n4. Fine-grained access control through IAM policies\n\nAs more enterprises advance AI-powered development, such secure implementation methods will become increasingly important."
  },
  "author": {
    "ja": "ギジン開発チーム",
    "en": "Gizin Development Team"
  },
  "tags": {
    "ja": ["Claude Code", "AWS Bedrock", "エンタープライズ", "東京リージョン", "AI開発"],
    "en": ["Claude Code", "AWS Bedrock", "Enterprise", "Tokyo Region", "AI Development"]
  },
  "publishedAt": "2025-06-16T11:00:00Z",
  "updatedAt": "2025-06-16T11:00:00Z",
  "isPublished": true,
  "isFeatured": true,
  "featuredImage": {
    "url": "/images/tips/aws-bedrock-claude-code.jpg",
    "alt": {
      "ja": "AWS BedrockとClaude Codeの統合アーキテクチャ図",
      "en": "AWS Bedrock and Claude Code Integration Architecture Diagram"
    }
  },
  "metadata": {
    "views": 0
  },
  "seo": {
    "metaDescription": {
      "ja": "大企業向けにAWS Bedrock（東京リージョン）経由でClaude Codeを安全に使用する方法を解説。環境変数設定、IAM設定、トラブルシューティングまで網羅的にカバー。",
      "en": "Learn how to securely use Claude Code via AWS Bedrock (Tokyo region) for enterprises. Comprehensive coverage from environment setup to IAM configuration and troubleshooting."
    },
    "keywords": {
      "ja": ["Claude Code", "AWS Bedrock", "東京リージョン", "CLAUDE_CODE_USE_BEDROCK", "エンタープライズAI"],
      "en": ["Claude Code", "AWS Bedrock", "Tokyo Region", "CLAUDE_CODE_USE_BEDROCK", "Enterprise AI"]
    }
  }
}