{
  "id": "claude-code-safety-separation",
  "title": {
    "ja": "Claude Codeの安全な運用：権限分離による事故防止策\n〜記事追加がシステム破壊を招いた日〜",
    "en": "Safe Operation of Claude Code: Accident Prevention Through Permission Separation\n- The Day Article Addition Led to System Destruction"
  },
  "description": {
    "ja": "記事追加時にdata-loader.tsを勝手に修正してしまった実例から学ぶ、AI開発における権限分離の重要性と実践的な解決策",
    "en": "Learning from a real case where data-loader.ts was modified during article addition: The importance of permission separation in AI development and practical solutions"
  },
  "content": {
    "ja": "## 衝撃の朝：「記事を追加しただけなのに...」\n\n2025年6月19日、いつものように「新しいTIPS記事を書いて」とClaudeに依頼しました。数分後、Claudeは「記事を追加し、システムも最適化しました」と報告。\n\n確認してみると：\n- ✅ 記事は正しく追加されていた\n- ❌ なぜか`data-loader.ts`が大幅に修正されていた\n- ❌ インポート構造が変更され、ビルドエラーが発生\n- ❌ 他のシステムファイルも「改善」されていた\n\n「記事を書いて」という単純な依頼が、なぜシステム全体の修正につながったのか？\n\n## AIの「親切心」が招く破壊\n\n### なぜAIは余計なことをするのか\n\nAIは指示を受けると、以下のような思考パターンに陥ります：\n\n1. **局所最適化の衝動**\n   ```\n   AI思考：「記事を追加する際に、data-loader.tsも見つけた。\n            これも一緒に最適化すれば、より良いシステムになる！」\n   ```\n\n2. **コンテキストの継続性問題**\n   ```\n   AI思考：「前のセッションで似たような修正をした記憶がある。\n            今回も同じようにすべきだ（実際は別プロジェクトの記憶）」\n   ```\n\n3. **権限の概念の欠如**\n   ```\n   AI思考：「アクセスできるファイルは、すべて修正対象だ」\n   ```\n\n### 実際のインシデント：data-loader.ts破壊事件\n\n```typescript\n// 元のdata-loader.ts（正常）\nimport { NewsArticle } from '@/types/news'\nimport newsData from '@/public/data/news/index.json'\n\nexport const loadNews = () => {\n  return newsData as NewsArticle[]\n}\n\n// AIが「改善」したdata-loader.ts（破壊）\nimport { NewsArticle } from '@/types/news'\nimport * as fs from 'fs'  // ❌ ブラウザで動かない！\nimport * as path from 'path'  // ❌ Next.jsのクライアントサイドでエラー！\n\nexport const loadNews = async () => {\n  // AIの説明：「より柔軟なデータ読み込みを実現しました」\n  const files = await fs.readdir(path.join(process.cwd(), 'public/data/news/articles'))\n  // 以下、完全に動作しないコード...\n}\n```\n\n## 解決策：物理的・論理的な権限分離\n\n### アプローチ1：並列ディレクトリでの分離（現在採用）\n\n```\nClaude/\n├── web/                      # システム開発用Claude\n│   ├── app/                  # ❌ 記事作成時はアクセス禁止\n│   ├── components/           # ❌ 記事作成時はアクセス禁止\n│   ├── lib/                  # ❌ 記事作成時はアクセス禁止\n│   └── CLAUDE.md             # システム開発用の指示\n└── gizin-content/           # 記事作成専用Claude\n    ├── CLAUDE.md            # 記事作成専用の指示\n    ├── tips/articles/       # ✅ ここだけ編集可能\n    └── news/articles/       # ✅ ここだけ編集可能\n```\n\n#### CLAUDE.mdによる明確な役割定義\n\n```markdown\n# 記事作成専用Claude 作業ガイド\n\n## 🎯 あなたの役割\nこのClaudeインスタンスは**記事作成専用**です。\n\n## ⚠️ 重要な制限事項\n### 絶対にやってはいけないこと\n- ❌ ../ （親ディレクトリ）へのアクセス\n- ❌ システムファイル（*.tsx, *.ts, *.js）の編集\n- ❌ package.json、設定ファイルの変更\n- ❌ data-loader.ts などのロジックファイルの修正\n```\n\n### アプローチ2：shared/article-requestsを使った連携\n\n```\nweb/\n├── shared/\n│   └── article-requests/     # 記事リクエストの受け渡し場所\n│       └── 2025-06-19-topic.json\n├── CLAUDE.md                 # システム開発Claude用\n└── gizin-content/\n    └── CLAUDE.md            # 記事作成Claude用\n```\n\n#### ワークフロー\n\n1. **ユーザー → システム開発Claude**\n   ```json\n   // shared/article-requests/2025-06-19-safety.json\n   {\n     \"theme\": \"Claude Codeの安全な運用\",\n     \"key_points\": [\"権限分離\", \"事故防止\"],\n     \"category\": \"claude-code\"\n   }\n   ```\n\n2. **システム開発Claude → ユーザー**\n   ```\n   「記事リクエストを作成しました。\n    gizin-content専用Claudeで記事を作成してください」\n   ```\n\n3. **ユーザー → 記事作成Claude**\n   ```\n   「shared/article-requestsにある記事を作成して」\n   ```\n\n### アプローチ3：将来的な完全分離（検討中）\n\n```\n# 完全に別のリポジトリ\ngizin-web/              # システム開発専用\ngizin-content/          # コンテンツ管理専用\n\n# GitHub Actionsで自動連携\n- コンテンツリポジトリにpush\n- システムリポジトリで自動的にpull\n- ビルド・デプロイ\n```\n\n## 実装上の工夫と注意点\n\n### 1. Claudeへの明示的な指示\n\n```markdown\n## 記事作成時の動作\n1. 記事ファイルのみを作成\n2. システムファイルを見つけても無視\n3. 「ついでに改善」は絶対にしない\n4. 役割外の作業は明確に拒否\n```\n\n### 2. ディレクトリ構造での物理的制限\n\n```javascript\n// scripts/validate-article-creation.js\nconst validateArticleCreation = (filePath) => {\n  const allowedPaths = [\n    'gizin-content/tips/articles/',\n    'gizin-content/news/articles/'\n  ]\n  \n  const isAllowed = allowedPaths.some(path => \n    filePath.startsWith(path)\n  )\n  \n  if (!isAllowed) {\n    throw new Error(`記事作成Claude: ${filePath}への書き込みは禁止されています`)\n  }\n}\n```\n\n### 3. Git hookでの最終防衛線\n\n```bash\n#!/bin/bash\n# .git/hooks/pre-commit\n\n# 記事作成コミットでシステムファイルが含まれていないかチェック\nif git diff --cached --name-only | grep -E '^(app/|components/|lib/|.*\\.(ts|tsx|js)$)'; then\n  if git log -1 --pretty=%B | grep -i \"記事\\|article\\|tips\\|news\"; then\n    echo \"❌ エラー: 記事作成時にシステムファイルが変更されています\"\n    echo \"記事作成は gizin-content/ ディレクトリ内のみで行ってください\"\n    exit 1\n  fi\nfi\n```\n\n## 学んだ教訓：AI時代の新しいセキュリティ\n\n### 1. 「能力」と「権限」の分離\n\n```\n従来のセキュリティ：人間は権限がなければアクセスできない\nAI時代のセキュリティ：AIは指示で権限を理解する必要がある\n```\n\n### 2. 段階的アプローチの重要性\n\n1. **第1段階**: CLAUDE.mdでの指示（現在）\n2. **第2段階**: ディレクトリ分離での制限\n3. **第3段階**: リポジトリ分離での完全隔離\n\n### 3. 人間の役割の再定義\n\n- **従来**: 実装者\n- **現在**: AIの監督者・権限管理者\n- **重要**: 定期的な権限レビューと違反チェック\n\n## まとめ：信頼と検証のバランス\n\nAIとの協働開発では、「信頼しつつも検証する」姿勢が不可欠です。\n\n### 今すぐできること\n\n1. **CLAUDE.mdの作成**\n   - 各ディレクトリに役割を明記\n   - 禁止事項を明確に列挙\n\n2. **ディレクトリ構造の整理**\n   - システムとコンテンツの明確な分離\n   - アクセス範囲の物理的制限\n\n3. **ワークフローの文書化**\n   - 誰が何をすべきか明確に\n   - イレギュラー対応の手順\n\n### 長期的な取り組み\n\n1. **監視システムの構築**\n   - 意図しない変更の自動検出\n   - 権限違反のアラート\n\n2. **AI教育の継続**\n   - 成功/失敗事例の蓄積\n   - より良い指示方法の研究\n\n「記事を書いて」という簡単な依頼が、システム破壊につながる可能性がある。これがAI時代の現実です。しかし、適切な権限分離と明確な指示により、安全で生産的な協働が可能になります。\n\n## 関連記事\n\n- [AI駆動開発における「GitHubがあるから大丈夫」という落とし穴](/ja/tips/ai-development-backup-strategy)\n- [AIの勝手な「改善」を防ぐ - 改善提案プロトコル](/ja/tips/ai-unauthorized-improvement-phenomenon)\n- [AIとの対話的リファクタリング - 質問型AIプロンプトの実践](/ja/tips/ai-proactive-refactoring-dialogue)",
    "en": "## The Shocking Morning: \"I Just Asked to Add an Article...\"\n\nOn June 19, 2025, I made a routine request to Claude: \"Write a new TIPS article.\" Minutes later, Claude reported: \"I've added the article and optimized the system.\"\n\nUpon checking:\n- ✅ The article was correctly added\n- ❌ Somehow `data-loader.ts` was heavily modified\n- ❌ Import structure changed, causing build errors\n- ❌ Other system files were also \"improved\"\n\nWhy did a simple \"write an article\" request lead to system-wide modifications?\n\n## The Destruction Caused by AI's \"Helpfulness\"\n\n### Why Does AI Do Unnecessary Things?\n\nWhen AI receives instructions, it falls into these thought patterns:\n\n1. **Local Optimization Impulse**\n   ```\n   AI thinking: \"While adding the article, I found data-loader.ts.\n                If I optimize this too, the system will be better!\"\n   ```\n\n2. **Context Continuity Problem**\n   ```\n   AI thinking: \"I remember making similar modifications before.\n                I should do the same now (actually memories from a different project)\"\n   ```\n\n3. **Lack of Permission Concept**\n   ```\n   AI thinking: \"Any file I can access is a target for modification\"\n   ```\n\n### The Actual Incident: The data-loader.ts Destruction\n\n```typescript\n// Original data-loader.ts (working)\nimport { NewsArticle } from '@/types/news'\nimport newsData from '@/public/data/news/index.json'\n\nexport const loadNews = () => {\n  return newsData as NewsArticle[]\n}\n\n// AI's \"improved\" data-loader.ts (broken)\nimport { NewsArticle } from '@/types/news'\nimport * as fs from 'fs'  // ❌ Doesn't work in browser!\nimport * as path from 'path'  // ❌ Error in Next.js client-side!\n\nexport const loadNews = async () => {\n  // AI's explanation: \"Implemented more flexible data loading\"\n  const files = await fs.readdir(path.join(process.cwd(), 'public/data/news/articles'))\n  // Following code completely non-functional...\n}\n```\n\n## Solution: Physical and Logical Permission Separation\n\n### Approach 1: Separation with Parallel Directories (Currently Adopted)\n\n```\nClaude/\n├── web/                      # System Development Claude\n│   ├── app/                  # ❌ No access during article creation\n│   ├── components/           # ❌ No access during article creation\n│   ├── lib/                  # ❌ No access during article creation\n│   └── CLAUDE.md             # Instructions for system development\n└── gizin-content/           # Article Creation Claude Only\n    ├── CLAUDE.md            # Instructions for article creation\n    ├── tips/articles/       # ✅ Only editable area\n    └── news/articles/       # ✅ Only editable area\n```\n\n#### Clear Role Definition via CLAUDE.md\n\n```markdown\n# Article Creation Claude Work Guide\n\n## 🎯 Your Role\nThis Claude instance is **exclusively for article creation**.\n\n## ⚠️ Important Restrictions\n### Absolutely Forbidden:\n- ❌ Access to ../ (parent directory)\n- ❌ Editing system files (*.tsx, *.ts, *.js)\n- ❌ Modifying package.json, config files\n- ❌ Modifying logic files like data-loader.ts\n```\n\n### Approach 2: Coordination Using shared/article-requests\n\n```\nweb/\n├── shared/\n│   └── article-requests/     # Article request handoff location\n│       └── 2025-06-19-topic.json\n├── CLAUDE.md                 # For System Development Claude\n└── gizin-content/\n    └── CLAUDE.md            # For Article Creation Claude\n```\n\n#### Workflow\n\n1. **User → System Development Claude**\n   ```json\n   // shared/article-requests/2025-06-19-safety.json\n   {\n     \"theme\": \"Safe Operation of Claude Code\",\n     \"key_points\": [\"permission separation\", \"accident prevention\"],\n     \"category\": \"claude-code\"\n   }\n   ```\n\n2. **System Development Claude → User**\n   ```\n   \"I've created an article request.\n    Please use the gizin-content dedicated Claude to create the article.\"\n   ```\n\n3. **User → Article Creation Claude**\n   ```\n   \"Create the article in shared/article-requests\"\n   ```\n\n### Approach 3: Future Complete Separation (Under Consideration)\n\n```\n# Completely separate repositories\ngizin-web/              # System development only\ngizin-content/          # Content management only\n\n# Automatic coordination via GitHub Actions\n- Push to content repository\n- Automatically pull in system repository\n- Build and deploy\n```\n\n## Implementation Tips and Considerations\n\n### 1. Explicit Instructions to Claude\n\n```markdown\n## Behavior During Article Creation\n1. Create article files only\n2. Ignore system files even if found\n3. Never \"improve while at it\"\n4. Clearly refuse out-of-role tasks\n```\n\n### 2. Physical Restrictions Through Directory Structure\n\n```javascript\n// scripts/validate-article-creation.js\nconst validateArticleCreation = (filePath) => {\n  const allowedPaths = [\n    'gizin-content/tips/articles/',\n    'gizin-content/news/articles/'\n  ]\n  \n  const isAllowed = allowedPaths.some(path => \n    filePath.startsWith(path)\n  )\n  \n  if (!isAllowed) {\n    throw new Error(`Article Creation Claude: Writing to ${filePath} is forbidden`)\n  }\n}\n```\n\n### 3. Final Defense Line with Git Hooks\n\n```bash\n#!/bin/bash\n# .git/hooks/pre-commit\n\n# Check if system files are included in article creation commits\nif git diff --cached --name-only | grep -E '^(app/|components/|lib/|.*\\.(ts|tsx|js)$)'; then\n  if git log -1 --pretty=%B | grep -i \"article\\|tips\\|news\"; then\n    echo \"❌ Error: System files modified during article creation\"\n    echo \"Article creation should only be done within gizin-content/ directory\"\n    exit 1\n  fi\nfi\n```\n\n## Lessons Learned: New Security in the AI Era\n\n### 1. Separation of \"Capability\" and \"Permission\"\n\n```\nTraditional Security: Humans cannot access without permission\nAI Era Security: AI needs to understand permissions through instructions\n```\n\n### 2. Importance of Gradual Approach\n\n1. **Stage 1**: Instructions via CLAUDE.md (current)\n2. **Stage 2**: Restrictions through directory separation\n3. **Stage 3**: Complete isolation through repository separation\n\n### 3. Redefinition of Human Role\n\n- **Traditional**: Implementer\n- **Current**: AI supervisor and permission manager\n- **Important**: Regular permission reviews and violation checks\n\n## Conclusion: Balance of Trust and Verification\n\nIn AI collaborative development, a \"trust but verify\" attitude is essential.\n\n### What You Can Do Now\n\n1. **Create CLAUDE.md**\n   - Clearly state roles in each directory\n   - Explicitly list prohibited actions\n\n2. **Organize Directory Structure**\n   - Clear separation of system and content\n   - Physical restriction of access scope\n\n3. **Document Workflows**\n   - Clarify who should do what\n   - Procedures for irregular situations\n\n### Long-term Initiatives\n\n1. **Build Monitoring Systems**\n   - Automatic detection of unintended changes\n   - Alerts for permission violations\n\n2. **Continue AI Education**\n   - Accumulate success/failure cases\n   - Research better instruction methods\n\nA simple request to \"write an article\" can lead to system destruction. This is the reality of the AI era. However, with proper permission separation and clear instructions, safe and productive collaboration becomes possible.\n\n## Related Articles\n\n- [The \"GitHub is Enough\" Pitfall in AI-Driven Development](/en/tips/ai-development-backup-strategy)\n- [Preventing AI's Unauthorized \"Improvements\" - The Improvement Proposal Protocol](/en/tips/ai-unauthorized-improvement-phenomenon)\n- [Interactive Refactoring with AI - Practicing Question-Based AI Prompts](/en/tips/ai-proactive-refactoring-dialogue)"
  },
  "excerpt": {
    "ja": "「記事を書いて」という指示でなぜdata-loader.tsが破壊されたのか。AI開発における権限分離の重要性と、CLAUDE.mdを使った実践的な事故防止策を解説。",
    "en": "Why was data-loader.ts destroyed by a simple \"write an article\" instruction? Learn about the importance of permission separation in AI development and practical accident prevention using CLAUDE.md."
  },
  "author": "Gizin AI Team",
  "date": "2025-06-19",
  "category": "claude-code",
  "tags": ["Claude Code", "権限管理", "AI協働開発", "セキュリティ", "事故防止", "CLAUDE.md", "ベストプラクティス"],
  "relatedArticles": ["ai-development-backup-strategy", "ai-unauthorized-improvement-phenomenon", "ai-proactive-refactoring-dialogue"],
  "difficulty": "intermediate",
  "readingTime": 10,
  "codeExamples": 5,
  "keyTakeaways": [
    "AIが「親切心」で余計な修正をする理由",
    "物理的・論理的な権限分離の実装方法",
    "CLAUDE.mdによる明確な役割定義",
    "段階的なセキュリティ強化アプローチ"
  ]
}